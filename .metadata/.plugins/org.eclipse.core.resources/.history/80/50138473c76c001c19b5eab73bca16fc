package com.te.DeadLockCondition;

public class Demo {

	public static void main(String[] args) {
	
		String obj1="object1";
		String obj2="Object2";
		
		
		Thread t1= new Thread() {
			
		public void run() {
			System.out.println("runing the object1");
		synchronized(obj1) {
			System.out.println(Thread.currentThread().getName()+"is holding"+obj1);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
			
				e.printStackTrace();
			}
			System.out.println(Thread.currentThread().getName()+"is waiting"+obj2);
		}
		synchronized (obj2) {
			
			System.out.println(Thread.currentThread().getName()+"is holding"+obj2);
		}
			
		}	
			
		};
		
		
		
Thread t2= new Thread() {
	public void run() {
		System.out.println("runing the object1");
	synchronized(obj2) {
		System.out.println(Thread.currentThread().getName()+"is holding"+obj2);
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getName()+"is waiting"+obj1);
	}
	synchronized (obj1) {
		
		System.out.println(Thread.currentThread().getName()+"is holding"+obj1);
	}
		
	}
	};
	t1.start();
	t2.start();

	}

}
